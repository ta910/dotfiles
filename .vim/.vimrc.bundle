"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=/Users/locona/.vim/bundle/repos/github.com/Shougo/dein.vim
set runtimepath^=~/.vim/bundle/ctrlp.vim

" Required:
call dein#begin(expand('/Users/locona/.vim/bundle'))

" Let dein manage dein
" Required:
call dein#add('Shougo/dein.vim')
" Add or remove your plugins here:
call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')

call dein#add('Shougo/neocomplete.vim')
"call dein#add('Shougo/vimproc.vim', {'do': 'make'})

call dein#add('Shougo/vimproc.vim', {
      \ 'build': {
      \     'windows' : 'tools\\update-dll-mingw',
      \     'cygwin'  : 'make -f make_cygwin.mak',
      \     'mac'     : 'make -f make_mac.mak',
      \     'linux'   : 'make',
      \     'unix'    : 'gmake',
      \    },
      \ })

" You can specify revision/branch/tag.
call dein#add('Shougo/vimshell', { 'rev': '3787e5' })

call dein#add('Shougo/unite.vim')

call dein#add('osyo-manga/vim-anzu')

" ディレクトリツリー
call dein#add('scrooloose/nerdtree')
call dein#add('itchyny/lightline.vim')
call dein#add('tomtom/tcomment_vim')

"クオート, 括弧を自動入力
call dein#add('Townk/vim-autoclose')

"call dein#add('tpope/vim-surround')

"HTMLのインデントをわかりやすくする
call dein#add('nathanaelkane/vim-indent-guides')

"ディレクトリ内ファイル検索
call dein#add('ctrlpvim/ctrlp.vim')

"文字列検索
call dein#add('rking/ag.vim')


" Required:
call dein#end()

" Required:
filetype plugin indent on

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

"End dein Scripts-------------------------

""""""""""""""""""""
"   NERDTree
""""""""""""""""""""

" NERDTree起動時にカーソルをファイルの方に向ける
function s:InsertToNormal()
  "call feedkeys("\<ESC>")
  call feedkeys("\<Space>")
  call feedkeys("\s")
  call feedkeys("\l")
endfunction

"autocmd VimEnter * if !argc() | NERDTree | normal <Space>sl<CR> | endif
"autocmd VimEnter * if !argc() | NERDTree | call feedkeys("\<Space>w",'n')| endif
autocmd VimEnter *  NERDTree | call s:InsertToNormal() 


"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeWinSize=30   "Treeの横幅
let g:NERDTreeMinimalUI=1  "ブックマークや、ヘルプのショートカットをメニューに表示する
let g:NERDTreeShowHidden=1 "隠しファイル表示
let g:NERDTreeShowLineNumbers=1  " 行番号
let g:NERDTreeDirArrows=0  "綺麗に見せる
let g:NERDTreeMouseMode=3  "ファイル,ディレクトリシングルクリックで開く

"C-aでTree間の移動
silent! map <C-o> :NERDTreeFind<CR>
let g:NERDTreeMapActivateNode="<C-o>"


""""""""""""""""""""
"   LightLine
"""""""""""""""""""
set laststatus=2
if !has('gui_running')
  set t_Co=256
endif
let g:lightline = {
    \ 'colorscheme': 'solarized',
    \ 'active': {
    \   'left': [ ['mode', 'paste'], ['fugitive', 'filename']]
    \ }
    \
    \ }

""""""""""""""""""
"  Unite
""""""""""""""""""
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable=1
let g:unite_source_file_mru_limit=200

"大文字小文字を区別しない
let g:unite_enable_ignore_case=1
let g:unite_enable_smart_case=1


""""""""""""""""""
" tcomment_vim
"""""""""""""""""
"let g:tcommentMapLeader1 = '<C-_>'
"let g:tcommentMapLeader1 = '<C-_>'

""""""""""""""""""""
"  indent-guides
""""""""""""""""""""
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme *.html :hi IndentGuidesOdd  guibg=red   ctermbg=2
autocmd VimEnter,Colorscheme *.erb  :hi IndentGuidesOdd  guibg=red   ctermbg=2
autocmd VimEnter,Colorscheme *.html :hi IndentGuidesEven guibg=green ctermbg=3
autocmd VimEnter,Colorscheme *.erb  :hi IndentGuidesEven guibg=green ctermbg=3
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
let g:indent_guides_start_level=1


""""""""""""""""""""""""""
" ctrilp
""""""""""""""""""""""""""
set wildignore+=*/tmp/**/*.cache,*.so,*.swp,*.zip,*.cache
let g:ctrlp_use_migemo = 2
let g:ctrlp_clear_cache_on_exit = 0   " 終了時キャッシュをクリアしない
let g:ctrlp_mruf_max            = 1000 " MRUの最大記録数
let g:ctrlp_open_new_file       = 1   " 新規ファイル作成時にタブで開く
let g:ctrlp_working_path_mode = 'ra'

let g:ctrlp_user_command = 'ag %s -l'

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(cache|exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
